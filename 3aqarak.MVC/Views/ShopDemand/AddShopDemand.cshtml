@model _3aqarak.MVC.ViewModels.ShopDemandViewModel
@{
    ViewBag.Title = "AddShopDemand";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

}
@section styles{
    <style>
        label {
            float: right;
            font-size: 16px;
            font-weight: bold;
            clear: both;
            margin-bottom: 10px;
        }

        h4 {
            text-align: center;
            font-size: 20px;
            text-decoration: underline;
        }

        h5 {
            text-align: right;
            font-size: 16px;
            text-decoration: underline;
            font-weight: bold;
        }
        
        .form-check-inline {
            float: right;
        }

        .ui-menu-item-wrapper {
            font-size: 20px;
            text-align: right;
        }

        .checkBoxDiv {
            margin-top: 1.5%;
            margin-bottom: 1.5%;
        }
    </style>
}


<div class="card">
    <div class="card-header text-right">
        <nav aria-label="breadcrumb" role="navigation" style="direction :rtl">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="@Url.Action("Index","Home")">الصفحة الرئيسية </a></li>
                <li class="breadcrumb-item active" aria-current="page">اضافة طلب محل لعميل </li>

            </ol>
        </nav>
    </div>
    <!-- Body-->
    <div class="card-body">
        <div class="table-responsive ps">
            <div class="card">
                <div class="card-body">
                    <form id="addDemand">

                        @Html.AntiForgeryToken()
                        <h6 class="reqAlignment ">الرجاء إدخال البيانت التي تحتوي علامة<abbr class="req">*</abbr> </h6>
                        <span class="text-danger" id="finishErr"></span>
                        <span class="text-danger" id="accessError"></span>
                        @Html.ValidationSummary()

                        <div class="form-group  ">
                            <label for="first" class="text-right"> بحث عن موظف السيلز:<abbr class="req">*</abbr></label>
                            <input type="text" class="form-control" id="tele" placeholder="السيلز" name="FK_ShopDemands_Users_SalesId" required data-val="true" data-val-required="الرجاء إختيار إسم موظف السيلز">
                            @Html.ValidationMessageFor(m => m.FK_ShopDemands_Users_SalesId,"",new {id="salesErr",@class="text-danger" })
                        </div>
                        <div class="row">
                            @Html.HiddenFor(m => m.FK_ShopDemands_Categories_Id, new { id = "cat" })

                            <div class="col">
                                <label>استخدام العقـــار:<abbr class="req">*</abbr></label>
                                @Html.DropDownListFor(m => m.FK_ShopDemands_Usage_Id, Model.Usages, "اختر نوع العقار", new { @class = "form-control", id = "residence", required = "required" })
                                @Html.ValidationMessageFor(m => m.FK_ShopDemands_Usage_Id, "", new { @class = "text-danger", id = "typeError" })
                            </div>
                            <div class="col">
                                <label>الاقسام العقارية<abbr class="req">*</abbr></label>
                                @Html.DropDownListFor(m => m.FK_ShopDemands_Transactions_Id, Model.Transactions, "اختر نوع التعامل", new { @class = "form-control", id = "trans", required = "required" })
                                @Html.ValidationMessageFor(m => m.FK_ShopDemands_Transactions_Id, "", new { @class = "text-danger", id = "transError" })
                            </div>
                            <div class="col">
                                <label>طــريقة الدفع:<abbr class="req">*</abbr></label>
                                @Html.DropDownListFor(m => m.FK_ShopDemands_PaymentMethod_Id, Model.Payments, "اختر طريقة الدفع", new { @class = "form-control", id = "payment", required = "required" })
                                @Html.ValidationMessageFor(m => m.FK_ShopDemands_PaymentMethod_Id, "", new { @class = "text-danger", id = "paymentError" })
                            </div>
                            <div class="col">
                                <label>نوع المحل<abbr class="req">*</abbr></label>
                                <select id="ScaleNamber" required class="form-control" name="ScaleNumber" data-val="true" data-val-required="الرجاء إختيار نوع المحل">
                                    <option value="" disabled selected>إختر نوع المحل</option>
                                    <option value="1">ميزانين</option>
                                    <option value="2">أرضي وميزانين</option>
                                    <option value="3">أرضي</option>
                                    <option value="4">الكل</option>
                                </select>
                                @*@Html.DropDownListFor(m => m.IsFurnished, new SelectList(new[] { new { value = true, text = "مفروش" } }.ToList(), "value", "text"), "نوع الفرش", new { @class = "form-control", id = "furnished", required = "required" })*@
                                @Html.ValidationMessageFor(m => m.ScaleNumber, "", new { @class = "text-danger", id = "ScaleNamberError" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <label> المنـــطقة:<abbr class="req">*</abbr></label>
                                @Html.DropDownListFor(m => m.FK_ShopDemands_Regions_FromId, Model.RegionsFrom, "مــن", new { @class = "form-control", id = "regFrom", required = "required" })

                                @Html.DropDownListFor(m => m.FK_ShopDemands_Regions_ToId, Model.RegionsTo, "الــى", new { @class = "form-control", id = "regTo", required = "required" })

                                @Html.ValidationMessageFor(m => m.FK_ShopDemands_Regions_FromId, "", new { @class = "text-danger", id = "FromRegError" })
                                @Html.ValidationMessageFor(m => m.FK_ShopDemands_Regions_ToId, "", new { @class = "text-danger", id = "ToRegError" })

                            </div>
                            <div class="col">
                                <div class="form-group ">
                                    <label>السعر/الايجار <abbr class="req">*</abbr></label>
                                    <input id="minPrice" min="0" type="number" class="form-control" placeholder="من" name="MinPrice" required data-val="true" data-val-required="الرجاء إدخال السعر">
                                    <span class="text-danger" id="minPriceErr"></span>
                                    <input id="maxPrice" min="0" type="number" class="form-control" placeholder="إلي" name="MaxPrice" required data-val="true" data-val-required="الرجاء إدخال السعر">
                                    <span class="text-danger" id="maxPriceErr"></span>
                                    @Html.ValidationMessageFor(m => m.MinPrice, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MaxPrice, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group ">
                                    <label>المساحة<abbr class="req">*</abbr></label>
                                    <input id="minSpace" min="0" type="number" class="form-control" placeholder="من" name="MixSpace" required data-val="true" data-val-required="الرجاء إدخال المساحه" />
                                    <span class="text-danger" id="minSpaceErr"></span>
                                    <input id="maxSpace" min="0" type="number" class="form-control" placeholder="الى" name="MaxSpace" required data-val="true" data-val-required="الرجاء إدخال المساحه" />
                                    <span class="text-danger" id="maxSpaceErr"></span>
                                    @Html.ValidationMessageFor(m => m.MinSpace, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MaxSpace, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col">
                                <div class="form-group ">
                                    <label>سنه البناء<abbr class="req">*</abbr></label>
                                    <input id="minBuildYear" min="1900" max="@DateTime.Now.Year" type="number" class="form-control" name="DateOfBuildFrom" placeholder="من" required data-val="true" data-val-required="الرجاء إدخال سنة البناء" />
                                    <span class="text-danger" id="minBuildYearErr"></span>
                                    <input id="maxBuildYear" min="1900" max="@DateTime.Now.Year" type="number" class="form-control" name="DateOfBuildTo" placeholder="الى" required data-val="true" data-val-required="الرجاء إدخال سنة البناء" />
                                    <span class="text-danger" id="maxBuildYearErr"></span>
                                    @Html.ValidationMessageFor(m => m.DateOfBuildFrom, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.DateOfBuildTo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group ">
                                    <label> عدد الحمامات<abbr class="req">*</abbr></label>
                                    <input id="minBath" type="number" min="0" class="form-control" placeholder="مــن" name="MinBathRooms" style="border :1px solid #DDD" required data-val="true" data-val-required="الرجاء إدخال عدد الحمامات">
                                    <span class="text-danger" id="minBathErr"></span>
                                    <input id="maxBath" type="number" min="0" class="form-control" placeholder="الى" name="MinBathRooms" style="border :1px solid #DDD" required data-val="true" data-val-required="الرجاء إدخال عدد الحمامات">
                                    <span class="text-danger" id="maxBathErr"></span>
                                    @Html.ValidationMessageFor(m => m.MinBathRooms, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MaxBathRooms, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">

                            <div class="col">
                                <label>تقسيم المحل:<abbr class="req">*</abbr></label>
                                @Html.DropDownListFor(m => m.IsDivider, new SelectList(new[] { new { value = true, text = "مقسم" }, new { value = false, text = "غير مقسم" } }.ToList(), "value", "text"), "نوع المحل", new { @class = "form-control", id = "IsDivider", required = "required" })
                                @Html.ValidationMessageFor(m => m.IsDivider, "", new { @class = "text-danger", id = "DividerError" })
                            </div>
                            <div class="col">
                                <label>نوع التجهيز:<abbr class="req">*</abbr></label>
                                @Html.DropDownListFor(m => m.IsFurnisher, new SelectList(new[] { new { value = true, text = "مجهز" }, new { value = false, text = "غير مجهز" } }.ToList(), "value", "text"), "نوع التجهيز", new { @class = "form-control", id = "IsFurnisher", required = "required" })
                                @Html.ValidationMessageFor(m => m.IsFurnisher, "", new { @class = "text-danger", id = "FurnisherError" })
                            </div>
                            <div class="col">
                                <label>الترخيص:<abbr class="req">*</abbr></label>
                                @Html.DropDownListFor(m => m.Islicense, new SelectList(new[] { new { value = true, text = "مرخص" }, new { value = false, text = "غير مرخص" } }.ToList(), "value", "text"), "نوع التجهيز", new { @class = "form-control", id = "Islicense", required = "required" })
                                @Html.ValidationMessageFor(m => m.Islicense, "", new { @class = "text-danger", id = "licenseError" })
                            </div>
                        </div>
                        <div class="row">



                        </div>
                        <div class="row">

                            <label>الكماليات المتاحة : <abbr class="req">*</abbr></label>
                            <div class="checkBoxDiv">
                                @foreach (var item in Model.Accessories)
                                {
                                    if (item.Selected)
                                    {
                                        <div class="checkbox icheck form-check form-check-inline ">
                                            <label>
                                                <input class="access" type="checkbox" checked value="true" data-id="@item.Value">@item.Text
                                            </label>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="checkbox icheck form-check form-check-inline ">
                                            <label>
                                                <input class="access" type="checkbox" value="false" data-id="@item.Value">@item.Text
                                            </label>
                                        </div>
                                    }

                                }
                            </div>

                            @Html.ValidationMessageFor(m => m.Accessories, "", new { @class = "text-danger", id = "access" })

                        </div>
                        <div class="row">

                            <div class="col">
                                <label>الاطــلالة:</label>
                                @Html.DropDownListFor(m => m.ViewsArr, Model.Views, "", new { @class = "form-control", id = "view", required = "required", multiple = "multiple" })
                                @Html.ValidationMessageFor(m => m.ViewsArr, "", new { @class = "text-danger", id = "viewError" })
                            </div>
                            <div class="col">
                                <label>الملاحظــات:</label>
                                <textarea class="form-control" id="notes" rows="10" col="100" style="border :1px solid #DDD ; border-radius:5px"></textarea>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <input type="button" id="filterBtn" class="btn btn-block" value="ترشيحات الطلب " />
                            </div>
                        </div>

                        <div id="clientSalesTable" style="display:none">
                            <table id="filterTable" class="table text-right table-hover table-responsive-lg">
                                <thead>
                                    <tr>
                                        <th class="text-center">#</th>
                                        <th>رقم العميل </th>
                                        <th>التــاريخ </th>
                                        <th>وصف العرض </th>
                                        <th>التفاصيل</th>
                                    </tr>
                                </thead>

                            </table>

                        </div>

                        <div class="form-group row">
                            <div class="col-md-6">
                                <input type="text" class="form-control" id="clientSearchTxt" placeholder="بحث عن عميل معين بالاسم او الهاتف">

                            </div>
                            <div class="col-md-6">
                                <input type="button" id="clientBtn" class="btn btn-default" value="تسجيل بيانات العميل " />

                            </div>
                        </div>


                        <div id="clientForm">
                            <h6 class="reqAlignment ">الرجاء إدخال البيانت التي تحتوي علامة<abbr class="req">*</abbr> </h6>

                            <div class="form-group  ">
                                <div class="form-row">
                                    <div class="form-group col-md-6">
                                        <label for="first" class="text-right"> الاســـم  :<abbr class="req">*</abbr></label>
                                        @*<input type="text" class="form-control " id="name" placeholder="الاســم" name="Name" required="required">*@
                                        @Html.TextBoxFor(m => m.Name, new { id = "name", @class = "form-control", name = "Name", @required = "required" })
                                        @Html.ValidationMessageFor(m => m.Name)
                                    </div>

                                    <div class="form-group col-md-6">

                                        <label for="phone" class="text-right">الموبايل :<abbr class="req">*</abbr></label>
                                        @Html.TextBoxFor(m => m.Mobile, new { id = "mobile", @class = "form-control", name = "Mobile", @required = "required", type = "tel", onkeypress = "return isNumberKey(event)", placeholder = "الموبايل" })
                                        @*<input type="text" class="form-control" id="mobile" placeholder="الموبايل" name="Mobile" required>*@
                                        @Html.ValidationMessageFor(m => m.Mobile)
                                        <span class="valid-msg hide text-danger"> </span>
                                        <span class="error-msg hide text-danger"></span>

                                    </div>

                                </div>
                            </div>
                            <div class="form-row">

                                <div class="form-group col-md-4">
                                    <label for="last" class="text-right"> الرقم القومي :</label>
                                    @Html.TextBoxFor(m => m.IdNumber, new { @class = "form-control", id = "idNumber", placeholder = "الرقم القومي", name = "IdNumber" })
                                    @* <input type="text" class="form-control" id="idNumber" placeholder="الرقم القومي" name="IdNumber">*@
                                    @Html.ValidationMessageFor(m => m.IdNumber)
                                </div>

                                <div class="form-group col-md-4">
                                    <label for="last" class="text-right"> الوظيفة :</label>
                                    <input type="text" class="form-control" id="job" placeholder="الوظيفة " name="Job">
                                    @Html.ValidationMessageFor(m => m.Job, "", new { @class = "text-danger text-right" })
                                </div>
                            </div>
                            <div class="form-group ">
                                <div class="form-row">
                                    <div class="form-group col-md-4">
                                        <label for="phone" class="text-right">التليفون :</label>
                                        @*<input id="phone" name="phone" type="tel" onkeypress="return isNumberKey(event)">*@
                                        <input type="tel" class="form-control" id="phone" placeholder="التليفون" name="Phone" onkeypress="return isNumberKey(event)">
                                        @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
                                        <span class="valid-msg3 hide text-danger"> </span>
                                        <span class="error-msg3 hide text-danger"></span>
                                    </div>

                                    <div class="form-group col-md-4">
                                        <label for="phone" class="text-right">2الموبايل :</label>
                                        @*<input id="phone" name="phone" type="tel" onkeypress="return isNumberKey(event)">*@
                                        <input type="tel" class="form-control" id="mobile2" placeholder="الموبايل2" name="Mobile2" onkeypress="return isNumberKey(event)">
                                        @Html.ValidationMessageFor(m => m.Mobile2, "", new { @class = "text-danger" })
                                        <span class="valid-msg2 hide text-danger"> </span>
                                        <span class="error-msg2 hide text-danger"></span>
                                    </div>

                                    <div class="form-group col-md-4">
                                        <label for="last" class="text-right"> افضــل وقت للاتصــال :</label>
                                        <input type="text" class="form-control" id="contact" placeholder="ميعاد الاتصــال" name="BestContactHour">
                                        @Html.ValidationMessageFor(m => m.BestContactHour, "", new { @class = "text-danger text-right" })
                                    </div>
                                </div>
                            </div>
                            <div class="form-group  ">
                                <div class="form-row">
                                    <div class="form-group col-md-6">
                                        <label for="last" class="text-right"> العنــوان :</label>
                                        <textarea class="form-control" rows="1" id="clientAddress" placeholder="العنوان" name="ClientAddress"></textarea>
                                        @Html.ValidationMessageFor(m => m.ClientAddress, "", new { @class = "text-danger text-right" })
                                    </div>
                                    <div class="form-group col-md-6">
                                        <label for="last" class="text-right"> ملاحظات :</label>
                                        <textarea class="form-control" rows="1" id="clientNotes" placeholder="ملاحظات" name="ClientNotes"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </form>


                 
                </div>

                <div class="card-footer">
                    <div class="row">
                        <input type="submit" form="addDemand" class="btn btn-default" role="button" />

                    </div>

                </div>
            </div>
        </div>
    </div>

    <!--Modal Contacts-->
    <div class="modal fade" id="calls" tabindex="-1" role="dialog" aria-labelledby="matches" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    ...
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

                </div>
            </div>
        </div>
    </div>

    <!--Modal details-->
    <div class="modal fade" id="detailsModal" role="dialog">
        <div class="modal-dialog modal-dialog-centered ">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">ترشيحات العرض</h4>
                </div>
                <div class="modal-body">

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>

</div>

@section scripts{
    <script>

        var teleId = "";
        var clientId = 0;

        function collectClientData(obj) {
            obj.BestContactHour = $("#contact").val();
            obj.PK_Client_Id = clientId;
            obj.Name = $("#name").val();
            //obj.Phone = $("#phone").val();
            //obj.Mobile = $("#mobile").val();
            //obj.Mobile2 = $("#mobile2").val();

             obj.Phone = iti3.getNumber();
            obj.Mobile = iti.getNumber();
            obj.Mobile2 = iti2.getNumber();

            obj.Job = $("#job").val();
            obj.ClientAddress = $("#clientAddress").val();
            obj.ClientNotes = $("#clientNotes").val();
            obj.IdNumber = $("#idNumber").val();
            return obj;
        };
        function validateDemandData() {
            if ($("#maxBuildYear").val() === "" || $("#maxBuildYear").val() === null) {
                $("#maxBuildYearErr").html("الرجاء إدخال اكبر تاريخ بناء!");
                $("#accessError").html("لابد ان تدخل رقم في خانة اكبر تاريخ بناء !");
                return false;
            }
            else {
                $("#maxBuildYearErr").html("");
                $("#accessError").html("");
            }
            if ($("#minBuildYear").val() === "" || $("#minBuildYear").val() === null) {
                $("#minBuildYearErr").html("الرجاء إدخال اقل تاريخ بناء!");
                $("#accessError").html("لابد ان تدخل رقم في خانة اقل تاريخ بناء !");
                return false;
            }
            else {
                $("#minBuildYearErr").html("");
                $("#accessError").html("");
            }
            //if ($("#maxElevate").val() === "" || $("#maxElevate").val() === null) {
            //    $("#maxElevateErr").html("الرجاء إدخال اكبر عدد للمصاعد!");
            //    $("#accessError").html("لابد ان تدخل رقم في خانة اكبر عدد للمصاعد !");
            //    return false;
            //}
            //else {
            //    $("#maxElevateErr").html("");
            //    $("#accessError").html("");
            //}

             //sales validation **************************
            if (teleId === "" || teleId === null ) {
                $("#salesErr").html("الرجاء إدخال اسم البائع!");
                $("#accessError").html("الرجاء إدخال الرجاء إدخال اسم البائع !");
                return false;
            }
            else {
                $("#salesErr").html("");
                $("#accessError").html("");
            }
            //region validation
             if ($("#regFrom").val() === "" || $("#regFrom").val() === null) {
                $("#FromRegError").html("الرجاء إدخال المنطقة الاولى للطلب!");
                $("#accessError").html("الرجاء إدخال المنطقة الاولى للطلب !");
                return false;
            }
            else {
                $("#FromRegError").html("");
                $("#accessError").html("");
            }

            if ($("#regTo").val() === "" || $("#regTo").val() === null) {
                $("#ToRegError").html("الرجاء إدخال المنطقة الثانيه للطلب!");
                $("#accessError").html("الرجاء إدخال المنطقة الثانيه للطلب !");
                return false;
            }
            else {
                $("#ToRegError").html("");
                $("#accessError").html("");
            }
            //*********************************
            
            if ($("#minPrice").val() === "" || $("#minPrice").val() === null) {
                $("#minPriceErr").html("الرجاء إدخال أقل سعر!");
                $("#accessError").html("لابد ان تدخل رقم في خانة السعر !");
                return false;
            }
            else {
                $("#minPriceErr").html("");
                $("#accessError").html("");
            }
            if ($("#maxPrice").val() === "" || $("#maxPrice").val() === null) {
                $("#maxPriceErr").html("الرجاء إدخال أعلى سعر!");
                $("#accessError").html("لابد ان تدخل رقم في خانة السعر !");
                return false;
            }
            else {
                $("#maxPriceErr").html("");
                $("#accessError").html("");
            }
            if ($("#maxSpace").val() === "" || $("#maxSpace").val() === null) {
                $("#maxSpaceErr").html("الرجاء إدخال أقل مساحة!");
                $("#accessError").html("لابد ان تدخل أقل مساحة !");
                return false;
            }
            else {
                $("#maxSpaceErr").html("");
                $("#accessError").html("");
            }


            if ($("#minSpace").val() === "" || $("#minSpace").val() === null) {
                $("#minSpaceErr").html("الرجاء إدخال أكبر مساحة!");
                $("#accessError").html("لابد ان تدخل أكبر مساحة !");
                return false;
            }
            else {
                $("#minSpaceErr").html("");
                $("#accessError").html("");
            }

            //if ($("#maxAreaSpace").val() === "" || $("#maxAreaSpace").val() === null) {
            //    $("#maxAreaSpaceErr").html("الرجاء إدخال أقل مساحة!");
            //    $("#accessError").html("لابد ان تدخل أقل مساحة !");
            //    return false;
            //}
            //else {
            //    $("#maxAreaSpaceErr").html("");
            //    $("#accessError").html("");
            //}

            //if ($("#minAreaSpace").val() === "" || $("#minAreaSpace").val() === null) {
            //    $("#minAreaSpaceErr").html("الرجاء إدخال أقل مساحة!");
            //    $("#accessError").html("لابد ان تدخل أقل مساحة !");
            //    return false;
            //}
            //else {
            //    $("#minAreaSpaceErr").html("");
            //    $("#accessError").html("");
            //}
            if ($("#minBath").val() === "" || $("#minBath").val() === null) {
                $("#minBathErr").html("الرجاء إدخال أقل عدد من الحمامات!");
                $("#accessError").html("لابد ان تدخل أقل عدد من الحمامات !");
                return false;
            }
            else {
                $("#minBathErr").html("");
                $("#accessError").html("");
            }
            if ($("#maxBath").val() === "" || $("#maxBath").val() === null) {
                $("#maxBathErr").html("الرجاء إدخال أكبر عدد من الحمامات!");
                $("#accessError").html("لابد ان تدخل أكبر عدد من الحمامات !");
                return false;
            }
            else {
                $("#maxBathErr").html("");
                $("#accessError").html("");
            }
            
           
           
            
            if (isNaN($("#minPrice").val()) || isNaN($("#maxPrice").val())) {
                alertify.notify("لابد ان تدخل رقم في خانة السعر", 'error', 3, function () { })
                return false;
            }
            if (isNaN($("#minBuildYear").val()) || isNaN($("#maxBuildYear").val())) {
                alertify.notify("لابد ان تدخل رقم في خانة سنه البناء", 'error', 3, function () { })
                return false;
            }
            //if (isNaN($("#minElevate").val()) || isNaN($("#maxElevate").val())) {
            //    alertify.notify("لابد ان تدخل رقم في خانة المصاعد", 'error', 3, function () { })
            //    return false;
            //}
            //if (isNaN($("#minRoom").val()) || isNaN($("#maxRoom").val())) {
            //    alertify.notify("لابد ان تدخل رقم في خانة عدد الغرف", 'error', 3, function () { })
            //    return false;
            //}
            if (isNaN($("#minBath").val()) || isNaN($("#maxBath").val())) {
                alertify.notify("لابد ان تدخل رقم في خانة عدد الحمامات", 'error', 3, function () { })
                return false;
            }
            if (isNaN($("#minSpace").val()) || isNaN($("#maxSpace").val())) {
                alertify.notify("لابد ان تدخل رقم في خانة مساحة المباني", 'error', 3, function () { })
                return false;
            }

            //if (isNaN($("#minAreaSpace").val()) || isNaN($("#maxAreaSpace").val())) {
            //    alertify.notify("لابد ان تدخل رقم في خانة مساحة الارض الغير مبنيه", 'error', 3, function () { })
            //    return false;
            //}
            //if (isNaN($("#minFloor").val()) || isNaN($("#maxFloor").val())) {
            //    alertify.notify("لابد ان تدخل رقم في خانة الطابق", 'error', 3, function () { })
            //    return false;
            //}
            if (Number($("#minBuildYear").val()) > Number($("#maxBuildYear").val())) {
                alertify.notify(" القيمة الصغرى لا يمكن ان تزيد عن العظمى", 'error', 3, function () { })
                return false;
            }
            //if (Number($("#minElevate").val()) > Number($("#maxElevate").val())) {
            //    alertify.notify(" القيمة الصغرى لا يمكن ان تزيد عن العظمى", 'error', 3, function () { })
            //    return false;
            //}
            if (Number($("#minPrice").val()) > Number($("#maxPrice").val())) {
                alertify.notify(" القيمة الصغرى لا يمكن ان تزيد عن العظمى", 'error', 3, function () { })
                return false;
            }
            //if (Number($("#minRoom").val()) > Number($("#maxRoom").val())) {
            //    alertify.notify("القيمة الصغرى لا يمكن ان تزيد عن العظمى", 'error', 3, function () { })
            //    return false;
            //}
            if (Number($("#minBath").val()) > Number($("#maxBath").val())) {
                alertify.notify("القيمة الصغرى لا يمكن ان تزيد عن العظمى", 'error', 3, function () { })
                return false;
            }
            if (Number($("#minSpace").val()) > Number($("#maxSpace").val())) {
                alertify.notify("القيمة الصغرى لا يمكن ان تزيد عن العظمى", 'error', 3, function () { })
                return false;
            }

            //if (Number($("#minAreaSpace").val()) > Number($("#maxAreaSpace").val())) {
            //    alertify.notify("القيمة الصغرى لا يمكن ان تزيد عن العظمى", 'error', 3, function () { })
            //    return false;
            //}
            //if (Number($("#minFloor").val()) > Number($("#maxFloor").val())) {
            //    alertify.notify("القيمة الصغرى لا يمكن ان تزيد عن العظمى", 'error', 3, function () { })
            //    return false;
            //}
            var accessArr = [];
            var finishArr = [];
            $.each($(".access"), function (index, value) {
                if ($(this).is(":checked")) {
                    accessArr.push($(this).attr("data-id"));
                };
            });
            //Add validation here
            if (accessArr.length < 1) {
                $("#accessError").html("لابد من إختيار أي من الكماليات المتاحة !");

                return false;
            }
            else {
                $("#accessError").html("");
            }

            $.each($(".finish"), function (index, value) {

                if ($(this).is(":checked")) {
                    finishArr.push($(this).attr("data-id"));
                }

            });
           
            //if ((finishArr.includes("6") || finishArr.includes("5")) && $("#furnished").val() === "True") {

            //    alertify.set('notifier', 'position', 'top-left');
            //    alertify.notify("لايمكن لشقه غير مشطبه ان تكون مفروشه!", "error", function () { });
            //    finishArr = [];
            //    return false;
            //}
            return true;

        };
        function collectDemandData() {
            var viewArr = [];
            var accessArr = [];
            var finishArr = [];
            $.each($("#view option:selected"), function (index, value) {
                viewArr.push($(this).val());
            });
            $.each($(".access"), function (index, value) {
                if ($(this).is(":checked")) {
                    accessArr.push($(this).attr("data-id"));
                };
            });
            //$.each($(".finish"), function (index, value) {

            //    if ($(this).is(":checked")) {
            //        finishArr.push($(this).attr("data-id"));
            //    };

            //});
            var obj = {
                DateOfBuildFrom: $("#minBuildYear").val(),
                DateOfBuildTo: $("#maxBuildYear").val(),
               
                FK_ShopDemands_Usage_Id: $("#residence").val(),
                FK_ShopDemands_Users_SalesId: teleId,
                FK_ShopDemands_Clients_ClientId: clientId,
                FK_ShopDemands_Categories_Id: $("#cat").val(),
                //look here
                FK_ShopDemands_PaymentMethod_Id :$("#payment").val(),
                FK_ShopDemands_Regions_FromId: $("#regFrom").val(),
                FK_ShopDemands_Regions_ToId: $("#regTo").val(),
                //FK_DemandUnits_Transactions_Id: $("#trans").val(),
                FK_ShopDemands_Transactions_Id: $("#trans").val(),
                AccessoriesArr: accessArr,
                ViewsArr: viewArr,

                Notes: $("#notes").val(),
                MinPrice: $("#minPrice").val(),
                MaxPrice: $("#maxPrice").val(),
                MinSpace: $("#minSpace").val(),
                MaxSpace: $("#maxSpace").val(),
               
                
                MaxBathRooms: $("#maxBath").val(),
                MinBathRooms: $("#minBath").val(),

                ScaleNumber: $("#ScaleNamber").val(),
                IsFurnisher:$("#IsFurnisher").val(),
                IsDivider:$("#IsDivider").val(),
                Islicense:$("#Islicense").val(),
                

            };

            return obj;
        };
        var token = $('input[name="__RequestVerificationToken"]').val();
        $("document").ready(function () {
            //sales man auto complete
            $("#tele").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/dashboard/admin/EmpAutoComplete",
                        type: "POST",
                        dataType: "json",
                        data: { text: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.FirstName + " " + item.LastName, value: item.FirstName + " " + item.LastName + "-" + item.PK_Users_Id };
                            }));

                        }
                    });
                },
                select: function (event, ui) {
                    teleId = ui.item.value.split("-")[1];
                    ui.item.value = ui.item.value.split("-")[0]
                },
            });

            //client auto Complate
            $("#clientSearchTxt").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/ShopDemand/ClientAutoComplete",
                        type: "POST",
                        dataType: "json",
                        data: { text: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.Name, value: item.Name + "-" + item.PK_Client_Id };
                            }));
                        }
                    });
                },
                select: function (event, ui) {
                    clientId = ui.item.value.split("-")[1];
                    ui.item.value = ui.item.value.split("-")[0];
                    $.ajax({
                        url: "/ShopDemand/GetClientdetails",
                        type: "POST",
                        dataType: "json",
                        data: { id: clientId },
                        success: function (data) {
                            $("#contact").val(data.clientList.BestContactHour);
                            $("#name").val(data.clientList.Name);
                            $("#phone").val(data.clientList.Phone);
                            $("#mobile").val(data.clientList.Mobile);
                            $("#mobile2").val(data.clientList.Mobile2);
                            $("#job").val(data.clientList.Job);
                            $("#address").val(data.clientList.Address);
                            $("#clientNotes").val(data.clientList.Notes);
                            $("#idNumber").val(data.clientList.IdNumber);
                            $("#clientForm input , #clientForm textarea").prop("readonly", true);

                        },
                    });

                },
            });


            filterTable = $("#filterTable").DataTable({
                "language": {
                    "url": "/Theme/assets/Plugins/DataTables/arabic.lang.json"
                },
                "processing": true, // for show progress bar
                "serverSide": true, // for process server side
                "filter": true, // this is for disable filter (search box)
                "orderMulti": false, // for disable multiple column at once
                "pageLength": 5,
                "bFilter": false,
                "bInfo": false,
                "bLengthChange": false,
                "stateSave": true,
                "ajax": {
                    "url": "/ShopDemand/LoadSalesData/",
                    "type": "POST",
                    "datatype": "json",
                    "data": function (d) {
                        var valid = true;
                        valid = validateDemandData();
                        if (!valid) {
                            $("#maxBuildYearErr").html("");
                            $("#accessError").html("");
                            return false;
                        }
                        d.demandVM = JSON.stringify(collectDemandData());
                    },

                },
                "columns": [
                    { "data": "PK_ShopAvailable_Id", "name": "PK_ShopAvailable_Id", "autoWidth": true },
                    { "data": "FK_ShopAvailable_Clients_ClientId", "name": "FK_ShopAvailable_Clients_ClientId", "autoWidth": true },
                    { "data": "DateString", "name": "DateString", "autoWidth": true },
                    { "data": "ShortDescription", "name": "ShortDescription", "autoWidth": true },
                    {
                        "render": function (data, type, full, meta) { return ' <button type="button" title="تفاصيل العرض " rel="tooltip" class="btn btn-link details " data-id="' + full.PK_ShopAvailable_Id + '">تفاصيل العرض</button>'; }
                    },

                ]
            });
            $("filterTable").on("click", ".details", function () {
                var Id = $(this).attr("data-id");
                $.ajax({
                    "url": "/ShopAvailable/AvailableShopDetails/",
                    accept: "applicaton/html",
                    type: "post",
                    dataType: "html",
                    data: {

                        saleId: Id,
                    },
                    success: function (response) {
                        $("#detailsModal").find(".modal-body").html(response);
                        $("#detailsModal").modal("show");
                    },
                    error: function () {
                        alertify.alert("حدث خطا في حفظ البيانات!")
                    }

                });
            });

            $("#filterBtn").click(function () {

                var valid = true;
                valid = validateDemandData();
                if (!valid) {
                    alertify.set('notifier', 'position', 'top-left');
                    alertify.notify('لم يتم ادخال جميع البيانات راجع رسائل الخطا على الشاشه  !', 'error', 3, function () { });
                    return false;
                }

                $("#clientSalesTable").show(1000);
                filterTable.draw();
            });

            $("#clientBtn").click(function () {
                clientId = 0;
                $("#clientForm input , #clientForm textarea").prop("readonly", false);
                $("#clientForm input , #clientForm textarea").val("");
            });

            $('.access').iCheck({
                checkboxClass: 'icheckbox_flat-pink',
                radioClass: 'iradio_square-pink',
                increaseArea: '20%' /* optional */
            })
                .on('ifChecked', function (event) {
                    $(this).val(true);
                })
                .on('ifUnchecked', function (event) {
                    $(this).val(false);
                });

            $('.finish').iCheck({
                checkboxClass: 'icheckbox_flat-pink',
                radioClass: 'iradio_square-pink',
                increaseArea: '20%' /* optional */
            })
                .on('ifChecked', function (event) {
                    $(this).val(true);
                })
                .on('ifUnchecked', function (event) {
                    $(this).val(false);
                });

            $("#addDemand").submit(function (e) {
                e.preventDefault();
                var valid = true;
                valid = validateDemandData();
                if (!$(this).valid() || !valid) {
                    return false;
                }
                var demandData = collectDemandData();
                var clientDemandData = collectClientData(demandData);
                $.ajax({
                    "url": "/ShopDemand/SaveDemand/",
                    "type": "POST",
                    dataType: "json",
                    "data": {
                        __RequestVerificationToken: token,
                        clientDemandVM: clientDemandData,
                    },
                    success: function (response) {
                        if (response.valid) {
                            alertify.alert(response.message, function () {
                                location.href = "/ShopDemand/AvailableMatchesAfterAdd/";
                            });
                        }
                        else {
                            alertify.alert(response.message, function () {

                            });
                        };

                    },
                    error: function (response) {
                        alertify.alert("حدث خطا ما عند حفظ البيانات!", function () {

                        })
                    }
                });


            });

        });


    </script>

    <script>
        var errorMsg = document.querySelector(".error-msg"),
            validMsg = document.querySelector(".valid-msg");

        // here, the index maps to the error code returned from getValidationError - see readme
        var errorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

        var input = document.querySelector("#mobile");
        var iti = window.intlTelInput(input, {
            utilsScript: "/theme/assets/plugins/intl-tel-input-master/build/js/utils.js",
        });
        var reset = function () {
            input.classList.remove("error");
            errorMsg.innerHTML = "";
            errorMsg.classList.add("hide");
            validMsg.classList.add("hide");
        };

        // on blur: validate
        input.addEventListener('blur', function () {
            reset();
            if (input.value.trim()) {
                if (iti.isValidNumber()) {
                    validMsg.classList.remove("hide");
                } else {
                    input.classList.add("error");
                    var errorCode = iti.getValidationError();
                    errorMsg.innerHTML = errorMap[errorCode];
                    errorMsg.classList.remove("hide");
                }
            }
        });

        // on keyup / change flag: reset
        input.addEventListener('change', reset);
        input.addEventListener('keyup', reset);


        //input 2
        var errorMsg2 = document.querySelector(".error-msg2"),
            validMsg2 = document.querySelector(".valid-msg2");
        var errorMap2 = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

        var input2 = document.querySelector("#mobile2");
        var iti2 = window.intlTelInput(input2, {
            utilsScript: "/theme/assets/plugins/intl-tel-input-master/build/js/utils.js",
        });
        var reset2 = function () {
            input2.classList.remove("error");
            errorMsg2.innerHTML = "";
            errorMsg2.classList.add("hide");
            validMsg2.classList.add("hide");
        };

        // on blur: validate
        input2.addEventListener('blur', function () {
            reset2();
            if (input2.value.trim()) {
                if (iti2.isValidNumber()) {
                    validMsg2.classList.remove("hide");
                } else {
                    input2.classList.add("error");
                    var errorCode2 = iti2.getValidationError();
                    errorMsg2.innerHTML = errorMap2[errorCode2];
                    errorMsg2.classList.remove("hide");
                }
            }
        });

        // on keyup / change flag: reset
        input2.addEventListener('change', reset2);
        input2.addEventListener('keyup', reset2);



        //input3
        var errorMsg3 = document.querySelector(".error-msg3"),
            validMsg3 = document.querySelector(".valid-msg3");
        var errorMap3 = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

        var input3 = document.querySelector("#phone");
        var iti3 = window.intlTelInput(input3, {
            utilsScript: "/theme/assets/plugins/intl-tel-input-master/build/js/utils.js",
        });

        var reset3 = function () {
            input3.classList.remove("error");
            errorMsg3.innerHTML = "";
            errorMsg3.classList.add("hide");
            validMsg3.classList.add("hide");
        };

        // on blur: validate
        input3.addEventListener('blur', function () {
            reset3();
            if (input3.value.trim()) {
                if (iti3.isValidNumber()) {
                    validMsg3.classList.remove("hide");
                } else {
                    input3.classList.add("error");
                    var errorCode3 = iti3.getValidationError();
                    errorMsg3.innerHTML = errorMap3[errorCode3];
                    errorMsg3.classList.remove("hide");
                }
            }
        });

        // on keyup / change flag: reset
        input3.addEventListener('change', reset3);
        input3.addEventListener('keyup', reset3);


    </script>
}