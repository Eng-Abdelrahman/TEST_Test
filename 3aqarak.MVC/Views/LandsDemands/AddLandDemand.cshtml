@model _3aqarak.MVC.ViewModels.LandsDemandsViewModel
@{
    ViewBag.Title = "AddLandDemand";
}

@section styles{
    <style>
        label {
            float: right;
            font-size: 16px;
            font-weight: bold;
            clear: both;
            margin-bottom: 10px;
        }

        h4 {
            text-align: center;
            font-size: 20px;
            text-decoration: underline;
        }

        h5 {
            text-align: right;
            font-size: 16px;
            text-decoration: underline;
            font-weight: bold;
        }

        .form-check-inline {
            float: right;
        }

        .ui-menu-item-wrapper {
            font-size: 20px;
            text-align: right;
        }

        .checkBoxDiv {
            margin-top: 1.5%;
            margin-bottom: 1.5%;
        }
    </style>
}

<div class="card">
    <div class="card-header">
        <nav aria-label="breadcrumb" role="navigation">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">الصفحة الرئيسية</a></li>
                <li class="breadcrumb-item "><a href="index"> طلبات الأراضي </a> </li>
                <li class="breadcrumb-item active">  إضافة طلب أراضي</li>
            </ol>
        </nav>
        <div class="card-body">
            <div class="container">
                <h5 class="reqAlignment ">الرجاء إدخال البيانت التي تحتوي علامة<abbr class="req">*</abbr> </h5>
                <form id="saveDemandLandForm">
                    @Html.AntiForgeryToken()
                    <div class="row">
                        <div class="col">
                            <label class="preLabel">موظف السيلز<abbr class="text-danger">*</abbr></label>
                            <input type="text" class="form-control" id="Sales-txt" placeholder="موظف السيلز">
                            @Html.ValidationMessageFor(s => s.FK_LandsDemands_Users_SalesId, "", new { @class = "text-danger" ,id="salesErr"})
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label class="preLabel">النوع<abbr class="text-danger">*</abbr></label>
                            <select id="LandType-dropdown" required class="form-control">
                                <option> اختر نوع الارض </option>
                                <option value="true">كارديون مبانى</option>
                                <option value="false">زراعى</option>
                            </select>
                            <span class="text-danger"></span>
                        </div>
                        <div class="col">
                            <label class="preLabel">الاقسام العقارية<abbr class="text-danger">*</abbr></label>
                            @Html.DropDownListFor(t => t.FK_LandsDemands_Transactions_Id, Model.Transactions, "اختر نوع التعامل", new { @class = "form-control", id = "transaction-dropdwon", required = "required" })
                            @Html.ValidationMessageFor(s => s.FK_LandsDemands_Transactions_Id, "", new { @class = "text-danger" })
                        </div>
                        <div class="col">
                            <label>طــريقة الدفع:<abbr class="req">*</abbr></label>
                            @Html.DropDownListFor(t => t.FK_LandsDemands_PaymentMethod_Id, Model.Payments, "اختر طريقة الدفع", new { @class = "form-control", id = "payment-dropdwon", required = "required" })
                            @Html.ValidationMessageFor(s => s.FK_LandsDemands_PaymentMethod_Id, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col">
                            <label> المنـــطقة:<abbr class="req">*</abbr></label>
                            @Html.DropDownListFor(m => m.FK_LandsDemands_Regions_FromId, Model.RegionsFrom, "مــن", new { @class = "form-control", id = "regionfrom-dropdown", required = "required" })
                            @Html.ValidationMessageFor(m => m.FK_LandsDemands_Regions_FromId, "", new { @class = "text-danger", id = "FromRegError" })

                            @Html.DropDownListFor(m => m.FK_LandsDemands_Regions_ToId, Model.RegionsTo, "الــى", new { @class = "form-control", id = "regionto-dropdown", required = "required" })
                            @Html.ValidationMessageFor(m => m.FK_LandsDemands_Regions_ToId, "", new { @class = "text-danger", id = "ToRegError" })
                        </div>
                        <div class="col">
                            <div class="form-group ">
                                <label>السعر/الايجار <abbr class="req">*</abbr></label>
                                <input id="minPrice-num" min="0" type="number" class="form-control" placeholder="من" name="MinPrice">
                                @Html.ValidationMessageFor(mp => mp.MinPrice, "", new { @class = "text-danger" })

                                <input id="maxPrice-num" min="0" type="number" class="form-control" placeholder="إلي">
                                @Html.ValidationMessageFor(mp => mp.MaxPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group ">
                                <label>المساحة<abbr class="req">*</abbr></label>
                                <input id="minSpace-num" min="0" type="number" class="form-control" placeholder="من" />
                                @Html.ValidationMessageFor(ms => ms.MinSpace, "", new { @class = "text-danger" })
                                <input id="maxSpace-num" min="0" type="number" class="form-control" placeholder="الى" />
                                @Html.ValidationMessageFor(ms => ms.MaxSpace, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    <div class="row">

                        <div class="col">
                            <label>الاطــلالة:</label>
                            @Html.DropDownListFor(m => m.ViewsArr, Model.Views, new { @class = "form-control", id = "view-dropdwon", required = "required", multiple = "multiple" })
                            @Html.ValidationMessageFor(m => m.ViewsArr, "", new { @class = "text-danger", id = "viewError" })
                        </div>


                        <div class="col">
                            <label>الملاحظــات:</label>
                            <textarea class="form-control" id="notes-txtArea" rows="10" col="100" style="border :1px solid grey ; border-radius:5px"></textarea>
                        </div>
                    </div>
                    <div class="row mt-5 mb-3">
                        <div class="col">
                            <a class="btn btn-default btn-block" id="getLandAvailableList-btn">إظهار الترشيحات</a>
                        </div>
                    </div>
                    <div id="availableLandHiddenDiv" style="display:none">
                        <table id="filterTable" class="table text-right table-hover  ">
                            <thead>
                                <tr>
                                    <th class="text-center">#</th>
                                    <th>رقم العميل </th>
                                    <th>التــاريخ </th>
                                    <th>وصف العرض </th>
                                    <th>التفاصيل</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div class="row ">
                        <div class="col">
                            <input type="text" class="form-control " id="clientSearchTxt" placeholder="بحث عن عميل معين بالاسم او الهاتف">
                        </div>
                        <div class="col">
                            <a id="clientBtn" class="btn btn-default">تسجيل بيانات العميل</a>
                        </div>
                    </div>
                    <div class="row" @*style="display:none;"*@ id="hiddendivforsaveclient">
                        <div class="card-body">
                            <span class="text-danger" id="finishErr"></span>
                            <span class="text-danger" id="accessError"></span>
                            <div class="form-group  ">
                                <div class="form-row">
                                    <div class="form-group col-md-6">
                                        <label for="first" class="text-right"> الاســـم  :<abbr class="req">*</abbr></label>
                                        <input type="text" class="form-control " id="clientName" placeholder="الاســم" name="Name" required="required" data-val="true" data-val-required="الرجاء إدخال اسم العميل">
                                        @Html.ValidationMessageFor(m => m.Name)
                                    </div>
                                    <div class="form-group col-md-6">
                                        <label for="mobile" class="text-right">الموبايل :<abbr class="req">*</abbr></label>
                                        @Html.TextBoxFor(m => m.Mobile, new { id = "clientMobile", @class = "form-control", placeholder = "الموبايل", type = "tel" })
                                        @Html.ValidationMessageFor(m => m.Mobile)
                                        <span class="valid-msg hide text-danger"> </span>
                                        <span class="error-msg hide text-danger"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group  ">
                                <div class="form-row">
                                    <div class="form-group col-md-6">
                                        <label for="last" class="text-right"> الرقم القومي :</label>
                                        <input type="text" class="form-control" id="clientIdNumber" placeholder="الرقم القومي" name="IdNumber">
                                    </div>
                                    <div class="form-group col-md-6">
                                        <label for="last" class="text-right"> الوظيفة :</label>
                                        <input type="text" class="form-control" id="clientJob" placeholder="الوظيفة " name="Job">
                                    </div>
                                </div>
                            </div>
                            <div class="form-group ">
                                <div class="form-row">

                                    <div class="form-group col-md-4">
                                        <label for="phone" class="text-right">التليفون :</label>
                                        <input type="tel" class="form-control" id="clientPhone" placeholder="التليفون" name="Phone">
                                        <span class="valid-msg3 hide text-danger"> </span>
                                        <span class="error-msg3 hide text-danger"></span>
                                    </div>
                                    <div class="form-group col-md-4">
                                        <label for="phone" class="text-right">2الموبايل :</label>
                                        <input type="tel" class="form-control" id="clientMobile2" placeholder="الموبايل2" name="Mobile2">
                                        <span class="valid-msg2 hide text-danger"> </span>
                                        <span class="error-msg2 hide text-danger"></span>
                                    </div>
                                    <div class="form-group col-md-4">
                                        <label for="last" class="text-right"> افضــل وقت للاتصــال :</label>
                                        <input type="text" class="form-control" id="clientBestContactHour" placeholder="ميعاد الاتصــال" name="BestContactHour">
                                    </div>
                                </div>
                            </div>
                            <div class="form-group  ">
                                <div class="form-row">
                                    <div class="form-group col-md-6">
                                        <label for="last" class="text-right"> العنــوان :</label>
                                        <textarea class="form-control" rows="1" id="clientAddress" placeholder="العنوان" name="Address"></textarea>
                                    </div>
                                    <div class="form-group col-md-6">
                                        <label for="last" class="text-right"> ملاحظات :</label>
                                        <textarea class="form-control" rows="1" id="clientNotes" placeholder="ملاحظات" name="ClientNotes"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-5">
                        <div class="col">
                            <button type="submit" class="btn btn-default" id="saveAvailableLand"> إضافة</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
        var clientId = 0;
        var SalesId = "";
        function collectClientData(obj) {
            obj.PK_Client_Id = clientId;
            obj.BestContactHour = $("#clientBestContactHour").val();
            obj.Name = $("#clientName").val();
            obj.Phone = $("#clientPhone").val();
            obj.Mobile = $("#clientMobile").val();
            obj.Mobile2 = $("#clientMobile2").val();
            obj.Job = $("#clientJob").val();
            obj.Address = $("#clientAddress").val();
            obj.ClientNotes = $("#clientNotes").val();
            obj.IdNumber = $("#clientIdNumber").val();
            return obj;
        };
        function validateLandDemandData() {
            if ($("#Sales-txt").val() === "" || $("#Sales-txt").val() === null) {
                $("#Sales-txt").next("span.text-danger").html("لابد من ادخال اسم الموظف");
                return false;
            }
            else {
                $("#Sales-txt").next("span.text-danger").html("");
            }
            if ($("#LandType-dropdown").val() === "" || $("#LandType-dropdown").val() === null) {
                $("#LandType-dropdown").next("span.text-danger").html("لابد من اختيار نوع الارض");
                return false;
            }
            else {
                $("#LandType-dropdown").next("span.text-danger").html("");
            }
            if ($("#transaction-dropdwon").val() === "" || $("#transaction-dropdwon").val() === null) {
                $("#transaction-dropdwon").next("span.text-danger").html("لابد من اختيار قسم عقارى");
                return false;
            }
            else {
                $("#transaction-dropdwon").next("span.text-danger").html("");
            }
            if ($("#payment-dropdwon").val() === "" || $("#payment-dropdwon").val() === null) {
                $("#payment-dropdwon").next("span.text-danger").html("لابد من اختيار طرقة دفع");
                return false;
            }
            else {
                $("#payment-dropdwon").next("span.text-danger").html("");
            }
            if ($("#regionfrom-dropdown").val() === "" || $("#regionfrom-dropdown").val() === null) {
                $("#regionfrom-dropdown").next("span.text-danger").html("لابد من اختيار المنطقة من");
                return false;
            }
            else {
                $("#regionfrom-dropdown").next("span.text-danger").html("");
            }
            if ($("#regionto-dropdown").val() === "" || $("#regionto-dropdown").val() === null) {
                $("#regionto-dropdown").next("span.text-danger").html("لابد من اختيار المنطقة الى");
                return false;
            }
            else {
                $("#regionto-dropdown").next("span.text-danger").html("");
            }
            if ($("#minPrice-num").val() === "" || $("#minPrice-num").val() === null) {
                $("#minPrice-num").next("span.text-danger").html("لابد من ادخال السعر من");
                return false;
            }
            else {
                $("#minPrice-num").next("span.text-danger").html("");
            }

             //sales validation 
            //if (teleId === "" || teleId === null ) {
            //    $("#salesErr").html("الرجاء إدخال اسم البائع!");
            //    $("#accessError").html("الرجاء إدخال الرجاء إدخال اسم البائع !");
            //    return false;
            //}
            //else {
            //    $("#salesErr").html("");
            //    $("#accessError").html("");
            //}
            //region validation
             if ($("#regFrom").val() === "" || $("#regFrom").val() === null) {
                $("#FromRegError").html("الرجاء إدخال المنطقة الاولى للطلب!");
                $("#accessError").html("الرجاء إدخال المنطقة الاولى للطلب !");
                return false;
            }
            else {
                $("#FromRegError").html("");
                $("#accessError").html("");
            }

            if ($("#regTo").val() === "" || $("#regTo").val() === null) {
                $("#ToRegError").html("الرجاء إدخال المنطقة الثانيه للطلب!");
                $("#accessError").html("الرجاء إدخال المنطقة الثانيه للطلب !");
                return false;
            }
            else {
                $("#ToRegError").html("");
                $("#accessError").html("");
            }

            //********************************
            if ($("#maxPrice-num").val() === "" || $("#maxPrice-num").val() === null) {
                $("#maxPrice-num").next("span.text-danger").html("لابد من ادخال السعر من");
                return false;
            }
            else {
                $("#maxPrice-num").next("span.text-danger").html("");
            }
            if ($("#maxSpace-num").val() === "" || $("#maxSpace-num").val() === null) {
                $("#maxSpace-num").next("span.text-danger").html("لابد من ادخال المساحه الى");
                return false;
            }
            else {
                $("#maxSpace-num").next("span.text-danger").html("");
            }
            if ($("#minSpace-num").val() === "" || $("#minSpace-num").val() === null) {
                $("#minSpace-num").next("span.text-danger").html("لابد من ادخال المساحه من");
                return false;
            }
            else {
                $("#minSpace-num").next("span.text-danger").html("");
            }
            if ($("#view-dropdwon").val() === "" || $("#view-dropdwon").val() === null) {
                $("#view-dropdwon").next("span.text-danger").html("لابد من اختيار اطلالة");
                return false;
            }
            else {
                $("#view-dropdwon").next("span.text-danger").html("");
            }

            if (Number($("#minPrice-num").val()) > Number($("#maxPrice-num").val())) {
                alertify.notify(" القيمة الصغرى لا يمكن ان تزيد عن العظمى", 'error', 3, function () { })
                return false;
            }
            if (Number($("#minSpace-num").val()) > Number($("#maxSpace-num").val())) {
                alertify.notify(" القيمة الصغرى لا يمكن ان تزيد عن العظمى", 'error', 3, function () { })
                return false;
            }

            if (isNaN($("#minPrice-num").val()) || isNaN($("#maxPrice-num").val())) {
                alertify.notify(" لابد من ادخال رقم فى خانة السعر", 'error', 3, function () { })
                return false;
            }
            if (isNaN($("#minSpace-num").val()) || isNaN($("#maxSpace-num").val())) {
                alertify.notify(" لابد من ادخال رقم فى خانة المساحة", 'error', 3, function () { })
                return false;
            }
            return true;
        };
        function collectLandDemandData() {
            var viewArr = [];
            $.each($("#view-dropdwon option:selected"), function (index, value) {
                viewArr.push($(this).val());
            });
            var obj = {
                FK_LandsDemands_Users_SalesId: SalesId,
                Type: $("#LandType-dropdown").val(),
                FK_LandsDemands_Transactions_Id: $("#transaction-dropdwon").val(),
                FK_LandsDemands_PaymentMethod_Id: $("#payment-dropdwon").val(),
                MaxPrice: $("#maxPrice-num").val(),
                MinPrice: $("#minPrice-num").val(),
                MinSpace: $("#minSpace-num").val(),
                MaxSpace: $("#maxSpace-num").val(),
                Notes: $("#notes-txtArea").val(),
                IsNegotiable: $("#IsNegotiable-chkBox").is(":checked"),
                IsMarketSearch: $("#IsMarketSearch-chkBox").is(":checked"),
                
                ViewsArr: viewArr,

                FK_LandsDemands_Clients_ClientId: clientId,
                FK_LandsDemands_Regions_FromId: $("#regionfrom-dropdown").val(),
                FK_LandsDemands_Regions_ToId: $("#regionto-dropdown").val(),
            };
            return obj;
        };
        var token = $('input[name="__RequestVerificationToken"]').val();
        $(document).ready(function () {


            $("#Sales-txt").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/dashboard/admin/EmpAutoComplete",
                        type: "POST",
                        dataType: "json",
                        data: { text: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                SalesId = item.PK_Users_Id;
                                return { label: item.FirstName + " " + item.LastName, value: item.FirstName + " " + item.LastName + "-" + item.PK_Users_Id };
                            }))
                        }
                    });
                },
                select: function (event, ui) {
                    SalesId = ui.item.value.split("-")[1];
                    ui.item.value = ui.item.value.split("-")[0];
                },
            });

            $("#clientSearchTxt").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/ApartmentAvailables/ClientAutoComplete",
                        type: "POST",
                        dataType: "json",
                        data: { text: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.Name, value: item.Name + "-" + item.PK_Client_Id };
                            }));
                        }
                    });
                },
                select: function (event, ui) {
                    clientId = ui.item.value.split("-")[1];
                    ui.item.value = ui.item.value.split("-")[0];
                    $.ajax({
                        url: "/ApartmentAvailables/GetClientdetails",
                        type: "POST",
                        dataType: "json",
                        data: { id: clientId },
                        success: function (data) {
                            $("#clientBestContactHour").val(data.clientList.BestContactHour);
                            $("#clientName").val(data.clientList.Name);
                            $("#clientPhone").val(data.clientList.Phone);
                            $("#clientMobile").val(data.clientList.Mobile);
                            $("#clientMobile2").val(data.clientList.Mobile2);
                            $("#clientJob").val(data.clientList.Job);
                            $("#clientAddress").val(data.clientList.Address);
                            $("#clientNotes").val(data.clientList.Notes);
                            $("#clientIdNumber").val(data.clientList.IdNumber);
                            $("#hiddendivforsaveclient input , #hiddendivforsaveclient textarea").prop("readonly", true);
                            $("#hiddendivforsaveclient").show(1000);
                        },
                    });
                },
            });

            $("#clientBtn").click(function () {
                clientId = 0;
                if ($("#hiddendivforsaveclient").css("display") === "none") {
                    $("#hiddendivforsaveclient").show();
                }
                $("#hiddendivforsaveclient input , #hiddendivforsaveclient textarea").prop("readonly", false);
                $("#hiddendivforsaveclient input , #hiddendivforsaveclient textarea").val("");
            });


            filterTable = $("#filterTable").DataTable({
                "language": {
                    "url": "/Theme/assets/Plugins/DataTables/arabic.lang.json"
                },
                "processing": true, // for show progress bar
                "serverSide": true, // for process server side
                "filter": true, // this is for disable filter (search box)
                "orderMulti": false, // for disable multiple column at once
                "pageLength": 5,
                "bFilter": false,
                "bInfo": false,
                "bLengthChange": false,
                "stateSave": true,
                "ajax": {
                    "url": "/LandsDemands/LoadAvailableLandData/",
                    "type": "POST",
                    "datatype": "json",
                    "data": function (d) {
                        var valid = true;
                        valid = validateLandDemandData();
                        if (!valid) {
                            $("#Sales-txt").next(".text-danger").html("");
                            return false;
                        }
                        d.landDemandVm = JSON.stringify(collectLandDemandData());
                    },
                },
                "columns": [
                    { "data": "PK_AvailableLands_Id", "name": "PK_AvailableLands_Id", "autoWidth": true },
                    { "data": "FK_AvaliableLands_Clients_ClientId", "name": "FK_AvaliableLands_Clients_ClientId", "autoWidth": true },
                    { "data": "DateString", "name": "DateString", "autoWidth": true },
                    { "data": "ShortDescription", "name": "ShortDescription", "autoWidth": true },
                    {
                        "render": function (data, type, full, meta) { return ' <button type="button" title="تفاصيل العرض " rel="tooltip" class="btn btn-link details " data-id="' + full.PK_AvailableLands_Id + '">تفاصيل العرض</button>'; }
                    },

                ]
            });

            $("#filterTable").on("click", ".details", function () {
                debugger;
                var Id = $(this).attr("data-id");
                $.ajax({
                    "url": "/AvailableLands/AvailableLandDetails/",
                    accept: "applicaton/html",
                    type: "post",
                    dataType: "html",
                    data: {

                        availableLandId: Id,
                    },
                    success: function (response) {
                        debugger;
                        $("#detailsModal").find(".modal-body").html(response);
                        $("#detailsModal").modal("show");
                    },
                    error: function () {
                        alertify.alert("حدث خطا في حفظ البيانات!")
                    }

                });
            });

            $("#getLandAvailableList-btn").click(function () {
                var valid = true;
                valid = validateLandDemandData();
                if (!valid) {
                    alertify.set('notifier', 'position', 'top-left');
                    alertify.notify('لم يتم ادخال جميع البيانات راجع رسائل الخطا على الشاشه  !', 'error', 3, function () { });
                    return false;
                }
                $("#availableLandHiddenDiv").show(1000);
                filterTable.draw();
            });

            $("#saveDemandLandForm").submit(function (e) {
                e.preventDefault();
                var Valid = true;
                Valid = validateLandDemandData();
                if (!Valid) {
                    return false;
                }
                var landDemandObj = collectLandDemandData();
                var clientObjWithDemandObj = collectClientData(landDemandObj);
                $.ajax({
                    url: "/LandsDemands/SaveLandDemand/",
                    type: "POST",
                    dataType: "json",
                    data: {
                        __RequestVerificationToken: token,
                        landsDemandsViewModel: clientObjWithDemandObj
                    },
                    success: function (response) {
                        if (response.valid) {
                            alertify.alert(response.message, function () {
                                location.href = "/LandsDemands/AvailableLandMatchesAfterAdd/";
                            });
                        }
                        else {
                            alertify.alert(response.message, function () {

                            });
                        };

                    },
                    error: function (response) {
                        alertify.alert("حدث خطا ما عند حفظ البيانات!", function () {

                        });
                    }
                });
            });

        });
    </script>
    <script>

        var input = document.querySelector("#clientMobile");
        var iti = window.intlTelInput(input, {
            utilsScript: "/theme/assets/plugins/intl-tel-input-master/build/js/utils.js",
        });

        var input2 = document.querySelector("#clientMobile2");
        var iti2 = window.intlTelInput(input2, {
            utilsScript: "/theme/assets/plugins/intl-tel-input-master/build/js/utils.js",
        });

        var input3 = document.querySelector("#clientPhone");
        var iti3 = window.intlTelInput(input3, {
            utilsScript: "/theme/assets/plugins/intl-tel-input-master/build/js/utils.js",
        });


    </script>

    <script src="/Theme/assets/Plugins/intl-tel-input-master/build/js/intlTelInput.js"></script>
    <script>
        var errorMsg = document.querySelector(".error-msg"),
            validMsg = document.querySelector(".valid-msg");

        // here, the index maps to the error code returned from getValidationError - see readme
        var errorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

        var input = document.querySelector("#clientMobile");
        var iti = window.intlTelInput(input, {
            utilsScript: "/theme/assets/plugins/intl-tel-input-master/build/js/utils.js",
        });
        var reset = function () {
            input.classList.remove("error");
            errorMsg.innerHTML = "";
            errorMsg.classList.add("hide");
            validMsg.classList.add("hide");
        };

        // on blur: validate
        input.addEventListener('blur', function () {
            reset();
            if (input.value.trim()) {
                if (iti.isValidNumber()) {
                    validMsg.classList.remove("hide");
                } else {
                    input.classList.add("error");
                    var errorCode = iti.getValidationError();
                    errorMsg.innerHTML = errorMap[errorCode];
                    errorMsg.classList.remove("hide");
                }
            }
        });

        // on keyup / change flag: reset
        input.addEventListener('change', reset);
        input.addEventListener('keyup', reset);


        //input 2
        var errorMsg2 = document.querySelector(".error-msg2"),
            validMsg2 = document.querySelector(".valid-msg2");
        var errorMap2 = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

        var input2 = document.querySelector("#clientMobile2");
        var iti2 = window.intlTelInput(input2, {
            utilsScript: "/theme/assets/plugins/intl-tel-input-master/build/js/utils.js",
        });
        var reset2 = function () {
            input2.classList.remove("error");
            errorMsg2.innerHTML = "";
            errorMsg2.classList.add("hide");
            validMsg2.classList.add("hide");
        };

        // on blur: validate
        input2.addEventListener('blur', function () {
            reset2();
            if (input2.value.trim()) {
                if (iti2.isValidNumber()) {
                    validMsg2.classList.remove("hide");
                } else {
                    input2.classList.add("error");
                    var errorCode2 = iti2.getValidationError();
                    errorMsg2.innerHTML = errorMap2[errorCode2];
                    errorMsg2.classList.remove("hide");
                }
            }
        });

        // on keyup / change flag: reset
        input2.addEventListener('change', reset2);
        input2.addEventListener('keyup', reset2);



        //input3
        var errorMsg3 = document.querySelector(".error-msg3"),
            validMsg3 = document.querySelector(".valid-msg3");
        var errorMap3 = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

        var input3 = document.querySelector("#clientPhone");
        var iti3 = window.intlTelInput(input3, {
            utilsScript: "/theme/assets/plugins/intl-tel-input-master/build/js/utils.js",
        });

        var reset3 = function () {
            input3.classList.remove("error");
            errorMsg3.innerHTML = "";
            errorMsg3.classList.add("hide");
            validMsg3.classList.add("hide");
        };

        // on blur: validate
        input3.addEventListener('blur', function () {
            reset3();
            if (input3.value.trim()) {
                if (iti3.isValidNumber()) {
                    validMsg3.classList.remove("hide");
                } else {
                    input3.classList.add("error");
                    var errorCode3 = iti3.getValidationError();
                    errorMsg3.innerHTML = errorMap3[errorCode3];
                    errorMsg3.classList.remove("hide");
                }
            }
        });

        // on keyup / change flag: reset
        input3.addEventListener('change', reset3);
        input3.addEventListener('keyup', reset3);


    </script>
}
}